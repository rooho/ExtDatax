spring:
  # ShardingSphere 配置项
  shardingsphere:
    datasource:
      # 所有数据源的名字
      names: ds-single, ds-orders-0, ds-orders-1
      # 单库时的数据源，用作默认数据源
      ds-single:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3306/db_lab?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: root
      # 订单 orders 数据源配置 00
      ds-orders-0:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3306/db_lab_orders_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: root
      # 订单 orders 数据源配置 01
      ds-orders-1:
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://127.0.0.1:3306/db_lab_orders_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: root
    # 分片规则
    sharding:
      # 配置默认数据源为单库数据源
      defaultDataSourceName: ds-single
      tables:
        # t_order 表配置
        t_order:
#          actualDataNodes: ds-orders-$->{0..1}.orders_$->{0..4} # 映射到 ds-orders 数据源的 orders 表
#          actualDataNodes: ds-orders-0.orders_0, ds-orders-0.orders_2, ds-orders-0.orders_4, ds-orders-0.orders_6, ds-orders-1.orders_1, ds-orders-1.orders_3, ds-orders-1.orders_5, ds-orders-1.orders_7
          actualDataNodes: ds-orders-0.t_order_$->{[0,2,4,6]}, ds-orders-1.t_order_$->{[1,3,5,7]} # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
#          key-generator: # 主键生成策略
#            column: order_id
#            type: SNOWFLAKE
          databaseStrategy:
            inline:
              algorithmExpression: ds-orders-$->{user_id % 2}
              shardingColumn: user_id
          tableStrategy:
            inline:
              algorithmExpression: t_order_$->{user_id % 8}
              shardingColumn: user_id
        # t_order_item 表配置
        t_order_item:
          actualDataNodes: ds-orders-0.t_order_item_$->{[0,2,4,6]}, ds-orders-1.t_order_item_$->{[1,3,5,7]} # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
          # 不使用内置的generator，因为workerId不好控制
#          key-generator: # 主键生成策略
#            column: order_item_id
#            type: SNOWFLAKE
          databaseStrategy:
            inline:
              algorithmExpression: ds-orders-$->{user_id % 2}
              shardingColumn: user_id
          tableStrategy:
            inline:
              algorithmExpression: t_order_item_$->{user_id % 8}
              shardingColumn: user_id
      bindingTables: t_order,t_order_item


    # 拓展属性配置
    props:
      sql:
        show: false # 打印 SQL